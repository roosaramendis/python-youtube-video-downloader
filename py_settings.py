# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'settings.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#created by: sidhas roosara mendis (DRAGON) 
#github link:

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QSettings
import sys
import os
import py_youtubedownloader_UI
global borderroundness
borderroundness = ["1px"]
global bordersize
bordersize = ["2px"]
global textcolor
textcolor = ["#ff0000"]
global askeverytime
global usecustomedownpath
usecustomedowpath = [False]
askeverytime = [False]
global customdownloadpath
customdownloadpath =[""]
global bordercolor
bordercolor = ["#ff0000"]
global mydir
mydir = os.path.dirname(os.path.realpath(__file__))
global bimageurl
bimageurl = "url("+mydir+"/assets/bacground image.png);"
global customdownloadpathstr
customdownloadpathstr = [""]
print(bimageurl)

class Ui_Frame(object):
    def setupUi(self, Frame):
        Frame.setObjectName("Settings")#Frame
        Frame.setFixedSize(640, 480)
        self.makesettingvals()        
        self.setdefsettingvals()
        self.getsettingvals()
        self.stylesheet =( "background-image: "+bimageurl+";"+ 
        "background-repeat: no-repeat;"+ 
        "background-position: center;")
        self.commenstyle =("*{border: "+bordersize[0]+" solid "+bordercolor[0]+";"+
                        "color: "+textcolor[0]+";"+
                        "border-radius: "+borderroundness[0]+";}"+
                        "*:hover{background: 'blue';}")    
        self.textinputstyle = ("*{border: "+bordersize[0]+" solid "+bordercolor[0]+";"+
                            "color: "+textcolor[0]+";"+
                            "border-radius: "+borderroundness[0]+";}"+
                            "*:hover{background: 'blue';}")        
        self.commenstyle2 =  ("*{border: "+bordersize[0]+" solid "+bordercolor[0]+";"+
                            "text-align: center;"+
                            "color: "+textcolor[0]+";"+
                            "border-radius: "+borderroundness[0]+";}")

        print(str(bordercolor[0])+str(borderroundness[0])+str(bordersize[0]))
        self.horizontalSlider = QtWidgets.QSlider(Frame)
        self.horizontalSlider.setGeometry(QtCore.QRect(40, 140, 501, 22))
        self.horizontalSlider.setMaximum(10)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.setValue(int(borderroundness[0][0]))
        self.horizontalSlider.setStyleSheet(self.commenstyle)
        self.horizontalSlider.valueChanged.connect(self.setboarroundness)
        print(borderroundness[0]+"shs")
        self.usecustomeDpath = QtWidgets.QCheckBox(Frame)
        self.usecustomeDpath.setGeometry(QtCore.QRect(40, 50, 220, 17))
        self.usecustomeDpath.setObjectName("usecustomeDpath")
        self.usecustomeDpath.setStyleSheet(self.commenstyle)
        self.usecustomeDpath.setToolTip("for use custome download path")
        if usecustomedowpath[0] == "true":
            self.usecustomeDpath.setChecked(True)
            #self.askevertime.setChecked(False)
        self.usecustomeDpath.stateChanged.connect(self.usecustomedownpath_clk)
        self.dpathlable = QtWidgets.QLabel(Frame)
        self.dpathlable.setGeometry(QtCore.QRect(40, 90, 501, 20))
        self.dpathlable.setObjectName("dpathlable")
        self.dpathlable.setText(customdownloadpathstr[0])
        self.dpathlable.setStyleSheet(self.textinputstyle)
        self.opensavepath = QtWidgets.QPushButton(Frame)
        self.opensavepath.setGeometry(QtCore.QRect(550, 90, 75, 23))
        self.opensavepath.setObjectName("opensavepath")
        self.opensavepath.setStyleSheet(self.commenstyle)
        self.opensavepath.clicked.connect(self.opensavefile_clk)
        self.askevertime = QtWidgets.QCheckBox(Frame)
        self.askevertime.setGeometry(QtCore.QRect(40, 70, 220, 17))
        self.askevertime.setObjectName("askevertime")
        self.askevertime.setStyleSheet(self.commenstyle)
        self.askevertime.setToolTip("will ask path to download every time you press download button")
        if askeverytime[0] == "true":
            self.askevertime.setChecked(True)
            self.usecustomeDpath.setChecked(False)
        self.askevertime.stateChanged.connect(self.askeverytime_clk)
        self.label = QtWidgets.QLabel(Frame)
        self.label.setGeometry(QtCore.QRect(40, 120, 181, 16))
        self.label.setObjectName("label")
        self.label.setStyleSheet(self.commenstyle)
        self.horizontalSlider_2 = QtWidgets.QSlider(Frame)
        self.horizontalSlider_2.setGeometry(QtCore.QRect(40, 190, 501, 22))
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.horizontalSlider_2.setMaximum(4)
        self.horizontalSlider_2.setStyleSheet(self.commenstyle)
        self.horizontalSlider_2.setValue(int(bordersize[0][0]))
        self.horizontalSlider_2.valueChanged.connect(self.setboardersize)
        self.label_2 = QtWidgets.QLabel(Frame)
        self.label_2.setGeometry(QtCore.QRect(40, 170, 181, 16))
        self.label_2.setObjectName("label_2")
        self.label_2.setStyleSheet(self.commenstyle)
        self.settextcolor = QtWidgets.QPushButton(Frame)
        self.settextcolor.setGeometry(QtCore.QRect(40, 220, 111, 23))
        self.settextcolor.setObjectName("settextcolor")
        self.settextcolor.setStyleSheet(self.commenstyle)
        self.settextcolor.clicked.connect(self.settextcolor_clk)
        self.setboardercolor = QtWidgets.QPushButton(Frame)
        self.setboardercolor.setGeometry(QtCore.QRect(40, 260, 111, 23))
        self.setboardercolor.setObjectName("setboardercolor")
        self.setboardercolor.setStyleSheet(self.commenstyle)
        self.setboardercolor.clicked.connect(self.setborderrcolor_clk)
        self.credits = QtWidgets.QPushButton(Frame)
        self.credits.setGeometry(QtCore.QRect(10, 450, 111, 23))
        self.credits.setObjectName("credits")
        self.credits.setStyleSheet(self.commenstyle)
        self.apply = QtWidgets.QPushButton(Frame)
        self.apply.setGeometry(QtCore.QRect(360, 450, 71, 23))
        self.apply.setObjectName("apply")
        self.apply.setStyleSheet(self.commenstyle)
        self.apply.clicked.connect(self.aplly_clk)
        self.apply.setToolTip("software restart need to apply changes")
        '''self.savenexit = QtWidgets.QPushButton(Frame)
        self.savenexit.setGeometry(QtCore.QRect(440, 450, 81, 23))
        self.savenexit.setObjectName("savenexit")
        self.savenexit.setStyleSheet(self.commenstyle)
        self.cancelnexit_2 = QtWidgets.QPushButton(Frame)
        self.cancelnexit_2.setGeometry(QtCore.QRect(530, 450, 91, 23))
        self.cancelnexit_2.setObjectName("cancelnexit_2")
        self.cancelnexit_2.setStyleSheet(self.commenstyle)'''
        self.label_3 = QtWidgets.QLabel(Frame)
        self.label_3.setGeometry(QtCore.QRect(550, 140, 47, 22))
        self.label_3.setObjectName("label_3")
        self.label_3.setStyleSheet(self.commenstyle)
        self.label_3.setText(borderroundness[0])
        self.label_4 = QtWidgets.QLabel(Frame)
        self.label_4.setGeometry(QtCore.QRect(550, 190, 47, 22))
        self.label_4.setObjectName("label_4")
        self.label_4.setText(bordersize[0])
        self.label_4.setStyleSheet(self.commenstyle)
        self.frame = QtWidgets.QFrame(Frame)
        self.frame.setObjectName(u"frametest")
        self.frame.setGeometry(QtCore.QRect(350, 230, 261, 181))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setUpdatesEnabled(True)
        
        #self.frame.setStyleSheet(commenstyle)
        self.pushButton =QtWidgets.QPushButton(self.frame)
        self.pushButton.setObjectName(u"pushButton")
        self.pushButton.setGeometry(QtCore.QRect(90, 100, 75, 23))
        self.pushButton.setText("test button")
        
        #self.pushButton.setStyleSheet(commenstyle)
        self.retranslateUi(Frame)
        QtCore.QMetaObject.connectSlotsByName(Frame)

    def makesettingvals(self):
        self.settingval = QSettings("Dragon yt downloader","settings vals")
    def askeverytime_clk(self):
       if self.askevertime.isChecked():
           askeverytime[0] = True
           self.usecustomeDpath.setChecked(False)
           usecustomedowpath[0] = False
       else:
           askeverytime[0] = False   
    def usecustomedownpath_clk(self):
        if self.usecustomeDpath.isChecked():
            usecustomedowpath[0] = True
            self.askevertime.setChecked(False)
            askeverytime[0] = False
            print(str(self.usecustomeDpath.isChecked()))
        else:
            usecustomedowpath[0] = False      
    def setboardersize(self):
        print(str(self.horizontalSlider_2.value()))
        
        #borderroundness = str(self.horizontalSlider.value())+"px"
        
        bordersize.clear()
        bordersize.append(str(self.horizontalSlider_2.value())+"px")
        print(bordersize[0])
        self.label_4.setText(bordersize[0])         
    def setboarroundness(self):
        print(str(self.horizontalSlider.value()))
        
        #borderroundness = str(self.horizontalSlider.value())+"px"
        
        borderroundness.clear()
        borderroundness.append(str(self.horizontalSlider.value())+"px")
        print(borderroundness[0])
        self.label_3.setText(borderroundness[0]) 
    def settextcolor_clk(self):
        textcolor1 =  QtWidgets.QColorDialog.getColor()
        if textcolor1.isValid():
            print(textcolor1.name())
            textcolor[0] = textcolor1.name()
    def setborderrcolor_clk(self):
        bordercolor1 =  QtWidgets.QColorDialog.getColor()
        if bordercolor1.isValid():
            print(bordercolor1.name())
            bordercolor[0] = bordercolor1.name()
    def setsettingvals(self):
        self.settingval.setValue("borderroundness",borderroundness[0])
        self.settingval.setValue("bordersize",bordersize[0])
        self.settingval.setValue("textcolor",textcolor[0])
        self.settingval.setValue("askeverytime",askeverytime[0])
        self.settingval.setValue("usecustomdownpath",usecustomedowpath[0])
        self.settingval.setValue("bordercolor",bordercolor[0])
        self.settingval.setValue("customedownloadpathstr",customdownloadpathstr[0])
    def setdefsettingvals(self):
        settingkeylist = self.settingval.allKeys()
        #print(str(len(settingkeylist)))
        if(settingkeylist == None):
            print("making regedit")
            self.settingval.setValue("borderroundness","1px")
            self.settingval.setValue("bordersize","2px")
            self.settingval.setValue("textcolor","#ff0000")
            self.settingval.setValue("askeverytime",False)
            self.settingval.setValue("usecustomdownpath",False)
            self.settingval.setValue("bordercolor","#ff0000")
            
        elif len(settingkeylist)==0:
            self.settingval.setValue("borderroundness","1px")
            self.settingval.setValue("bordersize","2px")
            self.settingval.setValue("textcolor","#ff0000") 
            self.settingval.setValue("askeverytime",False)
            self.settingval.setValue("usecustomdownpath",False)
            self.settingval.setValue("bordercolor","#ff0000")   
    def aplly_clk(self):
        print(borderroundness[0]+"fsdaf")
        self.setsettingvals()
        self.getsettingvals()
        print("fefef")
        commenstyle =("*{border: "+bordersize[0]+" solid "+bordercolor[0]+";"+
                "color:"+textcolor[0] +";"+
                "border-radius: "+borderroundness[0]+";}"+
                "*:hover{background: 'blue';}") 
        self.frame.setStyleSheet(commenstyle)
        self.pushButton.setStyleSheet(commenstyle)
        '''self.frame = QtWidgets.QFrame(self)
        self.frame.setObjectName(u"frametest")
        self.frame.setGeometry(QtCore.QRect(350, 230, 261, 181))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setUpdatesEnabled(True)
        self.frame.repaint()
        self.pushButton =QtWidgets.QPushButton(self.frame)
        self.pushButton.setObjectName(u"pushButton")
        self.pushButton.setGeometry(QtCore.QRect(90, 100, 75, 23))'''
    def opensavefile_clk(self):
        downpath1 = QtWidgets.QFileDialog.getExistingDirectory(None, 'download path',mydir)
        customdownloadpathstr[0] = downpath1           
    def getsettingvals(self):
        self.settingval = QSettings("Dragon yt downloader","settings vals")
        borderroundness[0] = str(self.settingval.value("borderroundness"))
        bordersize[0] = str(self.settingval.value("bordersize"))
        textcolor[0] = str(self.settingval.value("textcolor"))
        askeverytime[0] = self.settingval.value("askeverytime")
        usecustomedowpath[0] = self.settingval.value("usecustomdownpath")
        bordercolor[0] = self.settingval.value("bordercolor")
        customdownloadpathstr[0] =self.settingval.value("customedownloadpathstr")
        print( borderroundness[0] + bordersize[0]+bordercolor[0])
        print(str(customdownloadpathstr[0]))
        self.stylesheet =( "background-image: "+bimageurl+";"+ 
        "background-repeat: no-repeat;"+ 
        "background-position: center;")
        self.commenstyle =("*{border: "+bordersize[0]+" solid "+bordercolor[0]+";"+
                        "color: "+textcolor[0]+";"+
                        "border-radius: "+borderroundness[0]+";}"+
                        "*:hover{background: 'blue';}")    
        self.textinputstyle = ("*{border: "+bordersize[0]+" solid "+bordercolor[0]+";"+
                            "color: "+textcolor[0]+";"+
                            "border-radius: "+borderroundness[0]+";}"+
                            "*:hover{background: 'blue';}")        
        self.commenstyle2 =  ("*{border: "+bordersize[0]+" solid "+bordercolor[0]+";"+
                            "text-align: center;"+
                            "color: "+textcolor[0]+";"+
                            "border-radius: "+borderroundness[0]+";}") 
        
    def retranslateUi(self, Frame):
        _translate = QtCore.QCoreApplication.translate
        Frame.setWindowTitle(_translate("Frame", "Settings"))
        self.usecustomeDpath.setText(_translate("Frame", "Use Custom Download Path"))
        self.opensavepath.setText(_translate("Frame", "Open"))
        self.askevertime.setText(_translate("Frame", "Ask Every Time"))
        self.label.setText(_translate("Frame", "Set Border Roundness"))
        self.label_2.setText(_translate("Frame", "Set Border Thickness"))
        self.settextcolor.setText(_translate("Frame", "Set Text Color"))
        self.setboardercolor.setText(_translate("Frame", "Set Border Color"))
        self.credits.setText(_translate("Frame", "Credits"))
        self.apply.setText(_translate("Frame", "Apply"))
        #self.savenexit.setText(_translate("Frame", "Save and Exit"))
        #self.cancelnexit_2.setText(_translate("Frame", "Cancel and Exit"))
        self.label_3.setText(_translate("Frame", borderroundness[0]))
        self.label_4.setText(_translate("Frame", bordersize[0]))
        
        
        #
